№1
# Поиск отклонения стоимости каждого товара от средней стоимость всех товаров
SELECT user_id, count(order_id) as orders_count, 
(
SELECT
round((count(order_id)::decimal/count(DISTINCT user_id)::decimal),2)
FROM user_actions
WHERE action = 'create_order'
) as orders_avg,
count(order_id) - (
SELECT
round((count(order_id)::decimal/count(DISTINCT user_id)::decimal),2)
FROM user_actions
WHERE action = 'create_order'
)
as orders_diff
FROM user_actions
WHERE action = 'create_order'
group by user_id
ORDER BY user_id
LIMIT 1000

№2
# Поиск id заказов в которых содержится хотя бы один из пяти самых дорогих товаров
with 
top_prod as (SELECT product_id
FROM   products
ORDER BY price desc limit 5), 
unnest as (SELECT order_id,
product_ids,
unnest(product_ids) as product_id
FROM   orders)

SELECT DISTINCT order_id, product_ids
FROM unnest
WHERE product_id IN (SELECT * FROM top_prod)
ORDER BY order_id

# Или без табличных выражений
SELECT  DISTINCT order_id, product_ids
FROM 
(SELECT order_id, unnest(product_ids) AS product_id, product_ids
FROM orders) AS order_id
WHERE product_id IN (SELECT product_id
FROM products
order by price desc
limit 5)
ORDER BY order_id

№3
# Расчет возраста каждого пользователя с учетом заполнения отсутвующих дат рождения на средний возраст
with 
table_age as (SELECT user_id, DATE_PART('year',
age((SELECT max(time) FROM user_actions), birth_date))::decimal as all_age
FROM users
ORDER BY user_id),
avg_age as (SELECT ROUND(AVG(all_age),0) as avg_age
FROM table_age)

SELECT user_id, coalesce(all_age, (SELECT avg_age FROM avg_age)) AS age
FROM table_age

# Или так:
with users_age as (SELECT user_id,
                          date_part('year', age((SELECT max(time)
                                          FROM   user_actions), birth_date)) as age
                   FROM   users)
SELECT user_id,
       coalesce(age, (SELECT round(avg(age))
               FROM   users_age)) as age
FROM   users_age
ORDER BY user_id
