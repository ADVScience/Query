№1
# Поиск отклонения стоимости каждого товара от средней стоимость всех товаров
SELECT user_id, count(order_id) as orders_count, 
(
SELECT
round((count(order_id)::decimal/count(DISTINCT user_id)::decimal),2)
FROM user_actions
WHERE action = 'create_order'
) as orders_avg,
count(order_id) - (
SELECT
round((count(order_id)::decimal/count(DISTINCT user_id)::decimal),2)
FROM user_actions
WHERE action = 'create_order'
)
as orders_diff
FROM user_actions
WHERE action = 'create_order'
group by user_id
ORDER BY user_id
LIMIT 1000

№2
# Поиск id заказов в которых содержится хотя бы один из пяти самых дорогих товаров
with 
top_prod as (SELECT product_id
FROM   products
ORDER BY price desc limit 5), 
unnest as (SELECT order_id,
product_ids,
unnest(product_ids) as product_id
FROM   orders)

SELECT DISTINCT order_id, product_ids
FROM unnest
WHERE product_id IN (SELECT * FROM top_prod)
ORDER BY order_id

# Или без табличных выражений
SELECT  DISTINCT order_id, product_ids
FROM 
(SELECT order_id, unnest(product_ids) AS product_id, product_ids
FROM orders) AS order_id
WHERE product_id IN (SELECT product_id
FROM products
order by price desc
limit 5)
ORDER BY order_id

№3
# Расчет возраста каждого пользователя с учетом заполнения отсутвующих дат рождения на средний возраст
with 
table_age as (SELECT user_id, DATE_PART('year',
age((SELECT max(time) FROM user_actions), birth_date))::decimal as all_age
FROM users
ORDER BY user_id),
avg_age as (SELECT ROUND(AVG(all_age),0) as avg_age
FROM table_age)

SELECT user_id, coalesce(all_age, (SELECT avg_age FROM avg_age)) AS age
FROM table_age

# Или так:
with users_age as (SELECT user_id,
                          date_part('year', age((SELECT max(time)
                                          FROM   user_actions), birth_date)) as age
                   FROM   users)
SELECT user_id,
       coalesce(age, (SELECT round(avg(age))
               FROM   users_age)) as age
FROM   users_age
ORDER BY user_id

# У нас есть две таблицы с датами рождения пользователей и курьеров — users и couriers. Можно предположить, 
что в каждой таблице в колонке birth_date есть какие-то даты, которых нет в другой таблице. 
То есть есть такие даты, в которые родился кто-то из курьеров, но не родился ни один пользователь, и наоборот. 
Ну что ж, давайте попробуем проверить эту гипотезу.

SELECT a.birth_date as users_birth_date,
       users_count,
       b.birth_date as couriers_birth_date,
       couriers_count
FROM   (SELECT birth_date,
               count(user_id) as users_count
        FROM   users
        WHERE  birth_date is not null
        GROUP BY birth_date) as a full join (SELECT birth_date,
                                            count(courier_id) as couriers_count
                                     FROM   couriers
                                     WHERE  birth_date is not null
                                     GROUP BY birth_date) as b
        ON a.birth_date = b.birth_date
ORDER BY users_birth_date , couriers_birth_date 

# Работа с UNION
SELECT count(birth_date) as dates_count 
FROM(SELECT birth_date
                    FROM   users
                    WHERE  birth_date is not null
UNION
      SELECT birth_date
                    FROM   couriers
                    WHERE  birth_date is not null) as b_d


# сколько в среднем товаров заказывает каждый пользователь.
SELECT user_id, ROUND(AVG(array_length(product_ids,1)),2) AS avg_order_size
FROM
(SELECT user_id, A.order_id AS order_id, product_ids
FROM  (SELECT user_id,order_id
FROM   user_actions
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')  ) AS A
LEFT JOIN orders AS B
ON A.order_id = B.order_id
ORDER BY user_id, order_id) AS AVG_ORDER
GROUP BY user_id
LIMIT 1000



#Расчет средней стоимости заказа (средний чек) каждого клиента
SELECT order_id, SUM (price) AS order_price
FROM
(SELECT user_id, A.order_id AS order_id,product_ids, B.product_id AS product_id , price
FROM  (SELECT user_id, order_id
        FROM   user_actions
        WHERE  action = 'create_order'
        
          ) AS A
LEFT JOIN (SELECT *, UNNEST(product_ids) AS product_id FROM orders ) AS B
ON A.order_id = B.order_id
 INNER JOIN products AS C
ON B.product_id = C.product_id

) AS T1
GROUP BY order_id
ORDER BY order_id
LIMIT 1000

