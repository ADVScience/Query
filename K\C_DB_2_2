#Теперь на основе данных о выручке рассчитаем несколько относительных показателей, которые покажут, 
сколько в среднем потребители готовы платить за услуги нашего сервиса доставки. Остановимся на следующих метриках:
1. ARPU (Average Revenue Per User) — средняя выручка на одного пользователя за определённый период.
2. ARPPU (Average Revenue Per Paying User) — средняя выручка на одного платящего пользователя за определённый период.
3. AOV (Average Order Value) — средний чек, или отношение выручки за определённый период к общему количеству заказов за это же время.

with
paying_users_table as (
SELECT date(time) AS date, COUNT(DISTINCT user_id) as paying_users
FROM user_actions
WHERE order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order')
GROUP BY date(time)
ORDER BY date),

total_users_table as (
SELECT date(time) AS date, COUNT(DISTINCT user_id) as total_users
FROM user_actions
GROUP BY date(time)
ORDER BY date),

pivot_users_table as (
SELECT date, paying_users, total_users
FROM paying_users_table 
LEFT JOIN total_users_table USING(date)),

unnest_prod_table as (
SELECT creation_time::date as date, order_id, UNNEST(product_ids) AS product_id
FROM orders),

price_of_products_table as (
SELECT price, product_id
FROM products),

total_price_per_day_table as (
SELECT DATE, sum(price) AS revenue, COUNT(DISTINCT order_id) AS count_orders FROM
unnest_prod_table
LEFT JOIN price_of_products_table USING(product_id)
WHERE order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order')
GROUP BY date
ORDER BY date)

SELECT date,
ROUND((revenue::DECIMAL/total_users),2) AS arpu, 
ROUND((revenue::DECIMAL/paying_users),2) AS arppu, 
ROUND((revenue::DECIMAL/count_orders),2) AS aov
FROM pivot_users_table 
LEFT JOIN total_price_per_day_table USING(date)
ORDER BY date


#Второй варинат:
SELECT date,
       round(revenue::decimal / users, 2) as arpu,
       round(revenue::decimal / paying_users, 2) as arppu,
       round(revenue::decimal / orders, 2) as aov
FROM   (SELECT creation_time::date as date,
               count(distinct order_id) as orders,
               sum(price) as revenue
        FROM   (SELECT order_id,
                       creation_time,
                       unnest(product_ids) as product_id
                FROM   orders
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t1
            LEFT JOIN products using(product_id)
        GROUP BY date) t2
    LEFT JOIN (SELECT time::date as date,
                      count(distinct user_id) as users
               FROM   user_actions
               GROUP BY date) t3 using (date)
    LEFT JOIN (SELECT time::date as date,
                      count(distinct user_id) as paying_users
               FROM   user_actions
               WHERE  order_id not in (SELECT order_id
                                       FROM   user_actions
                                       WHERE  action = 'cancel_order')
               GROUP BY date) t4 using (date)
ORDER BY date
