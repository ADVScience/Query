#Давайте подробнее остановимся на платящих пользователях, копнём немного глубже и выясним, 
как много платящих пользователей совершают более одного заказа в день. 

with
paying_users_table as (
SELECT date(time) AS date, COUNT(DISTINCT user_id) as paying_users
FROM user_actions
WHERE order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order')
GROUP BY date(time)
ORDER BY date
),
more_one_payer_table as (
SELECT date, COUNT( DISTINCT user_id) several_orders_user
FROM(
select DATE(time) AS DATE, count(order_id) AS count_order, user_id
FROM user_actions
WHERE order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order')
group by user_id, DATE(time)
order by user_id
)sub_query_1
WHERE count_order > 1
GROUP BY date
ORDER BY date
),
one_payer_table as (
SELECT date, COUNT( DISTINCT user_id) single_order_user 
FROM(
select DATE(time) AS DATE, count(order_id) AS count_order, user_id
FROM user_actions
WHERE order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order')
group by user_id, DATE(time)
order by user_id
)sub_query_2
WHERE count_order = 1
GROUP BY date
ORDER BY date
),
one_and_more_pay as ( 
SELECT date, several_orders_user, single_order_user  
FROM more_one_payer_table 
LEFT JOIN one_payer_table USING(date)
),
total_table as (
SELECT date, paying_users, several_orders_user, single_order_user
FROM paying_users_table 
LEFT JOIN one_and_more_pay USING(date)
)

SELECT date,
round(100*(single_order_user::decimal/paying_users),2) as single_order_users_share,
round(100*(several_orders_user::decimal/paying_users),2) as several_orders_users_share
FROM  total_table
order by date

#Второй вариант:

SELECT date,
       round(100 * single_order_users::decimal / paying_users,
             2) as single_order_users_share,
       100 - round(100 * single_order_users::decimal / paying_users,
                   2) as several_orders_users_share
FROM   (SELECT time::date as date,
               count(distinct user_id) as paying_users
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')
        GROUP BY date) t1
    LEFT JOIN (SELECT date,
                      count(user_id) as single_order_users
               FROM   (SELECT time::date as date,
                              user_id,
                              count(distinct order_id) as user_orders
                       FROM   user_actions
                       WHERE  order_id not in (SELECT order_id
                                               FROM   user_actions
                                               WHERE  action = 'cancel_order')
                       GROUP BY date, user_id having count(distinct order_id) = 1) t2
               GROUP BY date) t3 using (date)
ORDER BY date
