#Для каждого дня в таблицах orders и user_actions рассчитайте следующие показатели:
Выручку, полученную в этот день.
Выручку с заказов новых пользователей, полученную в этот день.
Долю выручки с заказов новых пользователей в общей выручке, полученной за этот день.
Долю выручки с заказов остальных пользователей в общей выручке, полученной за этот день.

with
new_user_table AS (
SELECT min(time::date) AS date, user_id
FROM user_actions
GROUP BY user_id
),

count_new_users_table AS (
SELECT date, count(user_id) AS new_users
FROM new_user_table
GROUP BY date
ORDER BY date),

count_total_users AS (
SELECT time::date AS date, count(DISTINCT user_id) total_users
FROM user_actions
GROUP BY date),

new_and_old_users_table AS (
SELECT date, new_users, total_users, (total_users-new_users) AS old_users
FROM count_new_users_table LEFT JOIN count_total_users USING(date)
),

unnest_table AS (
SELECT creation_time::DATE AS date, UNNEST(product_ids) AS product_id, order_id
FROM orders
WHERE order_id not in (SELECT order_id FROM user_actions WHERE action = 'cancel_order')),

revenue_table AS (
SELECT date, SUM(price) as revenue
FROM unnest_table LEFT JOIN products USING(product_id)
GROUP BY date),

price_of_product AS (
SELECT price, order_id FROM unnest_table LEFT JOIN products USING(product_id)),

first_action_time_table  AS (
SELECT DATE(time) AS date, 
order_id, price,
min(date(time)) over (partition by user_id order by order_id) as first_action_time, 
user_id
FROM user_actions LEFT JOIN price_of_product USING(order_id)
),

new_users_revenue_table AS (
SELECT date, 
sum(price) as new_users_revenue 
FROM first_action_time_table
WHERE date = first_action_time and order_id NOT IN ( SELECT order_id FROM user_actions WHERE action= 'cancel_order') 
GROUP BY DATE
),

total_table AS (
SELECT date, new_users, total_users, old_users, revenue, new_users_revenue, (revenue-new_users_revenue) AS old_users_revenue
FROM new_and_old_users_table LEFT JOIN revenue_table USING(date) LEFT JOIN new_users_revenue_table USING(date) )

SELECT date, revenue, new_users_revenue,
ROUND(100*(new_users_revenue::DECIMAL/revenue),2) AS new_users_revenue_share,
ROUND(100*(old_users_revenue::DECIMAL/revenue),2) AS old_users_revenue_share
FROM total_table
ORDER BY date



#Второй вариант:

SELECT date,
       revenue,
       new_users_revenue,
       round(new_users_revenue / revenue * 100, 2) as new_users_revenue_share,
       100 - round(new_users_revenue / revenue * 100, 2) as old_users_revenue_share
FROM   (SELECT creation_time::date as date,
               sum(price) as revenue
        FROM   (SELECT order_id,
                       creation_time,
                       unnest(product_ids) as product_id
                FROM   orders
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t3
            LEFT JOIN products using (product_id)
        GROUP BY date) t1
    LEFT JOIN (SELECT start_date as date,
                      sum(revenue) as new_users_revenue
               FROM   (SELECT t5.user_id,
                              t5.start_date,
                              coalesce(t6.revenue, 0) as revenue
                       FROM   (SELECT user_id,
                                      min(time::date) as start_date
                               FROM   user_actions
                               GROUP BY user_id) t5
                           LEFT JOIN (SELECT user_id,
                                             date,
                                             sum(order_price) as revenue
                                      FROM   (SELECT user_id,
                                                     time::date as date,
                                                     order_id
                                              FROM   user_actions
                                              WHERE  order_id not in (SELECT order_id
                                                                      FROM   user_actions
                                                                      WHERE  action = 'cancel_order')) t7
                                          LEFT JOIN (SELECT order_id,
                                                            sum(price) as order_price
                                                     FROM   (SELECT order_id,
                                                                    unnest(product_ids) as product_id
                                                             FROM   orders
                                                             WHERE  order_id not in (SELECT order_id
                                                                                     FROM   user_actions
                                                                                     WHERE  action = 'cancel_order')) t9
                                                         LEFT JOIN products using (product_id)
                                                     GROUP BY order_id) t8 using (order_id)
                                      GROUP BY user_id, date) t6
                               ON t5.user_id = t6.user_id and
                                  t5.start_date = t6.date) t4
               GROUP BY start_date) t2 using (date)
