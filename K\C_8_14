#  данные о количестве товаров в заказах наших пользователей с информацией о стоимости каждого заказа, 
а затем рассчитаем несколько полезных показателей:
общее число заказов — колонку назовите orders_count
среднее количество товаров в заказе — avg_order_size
суммарную стоимость всех покупок — sum_order_value
среднюю стоимость заказа — avg_order_value
минимальную стоимость заказа — min_order_value
максимальную стоимость заказа — max_order_value

with sq_1 as 
(SELECT order_id, product_ids, sum(price) as price
FROM (SELECT order_id,product_ids, unnest(product_ids) as product_id
        FROM   orders) t1 
join products using(product_id)
GROUP BY order_id, product_ids),
sq_2 as (SELECT DISTINCT user_id, order_id
          FROM   (SELECT user_id, order_id
                       FROM   user_actions
                       WHERE  action = 'create_order'
                       and order_id not in (SELECT order_id
                                            FROM   user_actions
                                            WHERE  action = 'cancel_order')) t2 join orders using(order_id))
SELECT user_id,
       count(order_id) as orders_count,
       round(avg(array_length(product_ids, 1)), 2) as avg_order_size,
       sum(price) as sum_order_value,
       round(avg(price), 2) as avg_order_value,
       min(price) as min_order_value,
       max(price) as max_order_value
FROM   sq_1 join sq_2 using(order_id)
GROUP BY user_id
ORDER BY user_id limit 1000

# Второй варинат:
SELECT user_id,
       count(order_price) as orders_count,
       round(avg(order_size), 2) as avg_order_size,
       sum(order_price) as sum_order_value,
       round(avg(order_price), 2) as avg_order_value,
       min(order_price) as min_order_value,
       max(order_price) as max_order_value
FROM   (SELECT user_id,
               order_id,
               array_length(product_ids, 1) as order_size
        FROM   (SELECT user_id,
                       order_id
                FROM   user_actions
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t1
            LEFT JOIN orders using(order_id)) t2
    LEFT JOIN (SELECT order_id,
                      sum(price) as order_price
               FROM   (SELECT order_id,
                              product_ids,
                              unnest(product_ids) as product_id
                       FROM   orders
                       WHERE  order_id not in (SELECT order_id
                                               FROM   user_actions
                                               WHERE  action = 'cancel_order')) t3
                   LEFT JOIN products using(product_id)
               GROUP BY order_id) t4 using (order_id)
GROUP BY user_id
ORDER BY user_id limit 1000
